import pandas as pd
from scipy import stats

# Assume df is your DataFrame with the following columns:
# 'Day' (string/datetime), 'hour' (numeric, e.g., 8, 9, ..., 14),
# 'Missed' (number of missed calls), and 'Offered' (number of offered calls).

# Ensure 'Day' is a datetime object
df['Day'] = pd.to_datetime(df['Day'])

# 1. Identify the low and normal 8AM missed days

# Filter the data for 8AM only to calculate thresholds
df_8am = df[df['hour'] == 8]

# Calculate the 25th and 75th percentiles for the 8AM 'Missed' metric
low_threshold = df_8am['Missed'].quantile(0.25)
upper_threshold = df_8am['Missed'].quantile(0.75)

# Identify days that qualify as "low" and "normal" based on 8AM missed calls
low_days = df_8am[df_8am['Missed'] < low_threshold]['Day'].unique()
normal_days = df_8am[(df_8am['Missed'] >= low_threshold) & (df_8am['Missed'] <= upper_threshold)]['Day'].unique()

print("Low 8AM missed days:", low_days)
print("Normal 8AM missed days:", normal_days)

# 2. Compute the average Offered calls for the rest of the day (hours > 8) per day

# Filter the data for hours after 8AM
df_rest_of_day = df[df['hour'] > 8]

# Group by day and calculate the average Offered calls for the rest of the day
avg_offered_by_day = df_rest_of_day.groupby('Day')['Offered'].mean().reset_index()
avg_offered_by_day.rename(columns={'Offered': 'Avg_Offered_RestOfDay'}, inplace=True)

# 3. Merge the daily average with the classification of days based on 8AM missed calls

# Create a DataFrame for the 8AM classification
df_8am_class = df_8am[['Day', 'Missed']].copy()

# Define a new column for classification: 'Low' for low days, 'Normal' for normal days.
# You can optionally add another group for high days if needed.
def classify_day(missed, low_th, up_th):
    if missed < low_th:
        return 'Low'
    elif missed <= up_th:
        return 'Normal'
    else:
        return 'High'

df_8am_class['Group'] = df_8am_class['Missed'].apply(lambda x: classify_day(x, low_threshold, upper_threshold))

# Merge the classification with the daily averages for the rest of the day
df_daily = pd.merge(avg_offered_by_day, df_8am_class[['Day', 'Group']], on='Day', how='inner')

# 4. Extract the average Offered calls for the two groups (low vs normal)
offered_low = df_daily[df_daily['Group'] == 'Low']['Avg_Offered_RestOfDay']
offered_normal = df_daily[df_daily['Group'] == 'Normal']['Avg_Offered_RestOfDay']

# 5. Perform the two-sample t-test
t_stat, p_value = stats.ttest_ind(offered_low, offered_normal, nan_policy='omit')

print(f"T-test for average Offered calls (rest of day) between low and normal 8AM missed days:")
print(f"T-statistic: {t_stat}")
print(f"P-value: {p_value}")

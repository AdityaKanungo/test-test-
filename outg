import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import ttest_ind
import statsmodels.formula.api as smf

# -------------------------------
# Step 1: Data Loading, Filtering, and Initial Exploration
# -------------------------------

# Load the dataset (adjust file path if needed)
df = pd.read_excel('Outage_data.xlsx')

# Convert 'Day' to datetime and ensure proper data types for Hour
df['Day'] = pd.to_datetime(df['Day'])
df['Hour'] = df['Hour'].astype(int)

# Filter to include only Monday-Friday (weekday: 0=Monday, ..., 4=Friday)
df = df[df['Day'].dt.weekday < 5]

# Filter to include only business hours (8:00 to 16:00)
df = df[(df['Hour'] >= 8) & (df['Hour'] <= 16)]

print("Filtered Data Head:")
print(df.head())
print("\nData Info:")
print(df.info())

# -------------------------------
# Step 2: Identifying Outage Events
# -------------------------------

# Assume the 'Outage' column flags an outage (1 = outage, 0 = normal operation)
df['Outage_Flag'] = df['Outage'] == 1

# For each day, determine the first hour of outage (if any)
outage_events = (
    df[df['Outage_Flag']]
    .groupby('Day')['Hour']
    .min()
    .reset_index()
    .rename(columns={'Hour': 'Outage_Start_Hour'})
)
print("\nOutage Events by Day:")
print(outage_events)

# Merge outage start hour information back into the main dataframe
df = pd.merge(df, outage_events, on='Day', how='left')

# -------------------------------
# Step 3: Creating Post-Outage Windows
# -------------------------------

# Define how many hours after the outage to analyze (e.g., next 3 hours)
post_outage_hours = 3

# Create a flag for rows falling in the post-outage window:
# Only if the day had an outage; the condition is that the current Hour is 
# strictly greater than the outage start hour and within the specified window.
df['Post_Outage'] = (
    df['Outage_Start_Hour'].notnull() &
    (df['Hour'] > df['Outage_Start_Hour']) &
    (df['Hour'] <= df['Outage_Start_Hour'] + post_outage_hours)
)

# For days with no outage, fill outage start hour with a placeholder (optional)
df['Outage_Start_Hour'] = df['Outage_Start_Hour'].fillna(-1)
print("\nSample Data with Post-Outage Flag:")
print(df.head(10))

# -------------------------------
# Step 4: Quantifying Impact: Baseline vs. Post-Outage
# -------------------------------

# Key metrics to analyze (adjust names as in your dataset)
metrics = ['Call Volume', 'Missed calls', 'Answer Rate', 'Calls per agent']

# For baseline, calculate average metrics (by hour) from days with no outage
baseline_df = df[~df['Outage_Flag']].groupby('Hour')[metrics].mean().reset_index()
baseline_df = baseline_df.rename(columns={
    'Call Volume': 'Baseline_Call_Volume',
    'Missed calls': 'Baseline_Missed_Calls',
    'Answer Rate': 'Baseline_Answer_Rate',
    'Calls per agent': 'Baseline_Calls_per_Agent'
})
print("\nBaseline Metrics by Hour:")
print(baseline_df.head())

# Merge baseline metrics back to main dataframe by Hour for comparison
df = pd.merge(df, baseline_df, on='Hour', how='left')

# Calculate percentage change metrics in the post-outage window:
# - Backlog percentage: additional missed calls as a percentage of call volume
# - Answer Rate drop percentage
# - Increase in Calls per Agent percentage
df['Missed_Calls_Backlog_%'] = np.where(
    df['Post_Outage'],
    ((df['Missed calls'] - df['Baseline_Missed_Calls']) / df['Baseline_Call_Volume']) * 100,
    np.nan
)

df['Answer_Rate_Drop_%'] = np.where(
    df['Post_Outage'],
    ((df['Baseline_Answer_Rate'] - df['Answer Rate']) / df['Baseline_Answer_Rate']) * 100,
    np.nan
)

df['Calls_per_Agent_Increase_%'] = np.where(
    df['Post_Outage'],
    ((df['Calls per agent'] - df['Baseline_Calls_per_Agent']) / df['Baseline_Calls_per_Agent']) * 100,
    np.nan
)

print("\nPost-Outage Metrics Sample:")
print(df[df['Post_Outage']].head())

# -------------------------------
# Step 5: Visualization
# -------------------------------

# Choose an example day with an outage for visualization (first outage day)
if not outage_events.empty:
    example_day = outage_events.iloc[0]['Day']
    day_data = df[df['Day'] == example_day]
else:
    example_day = df['Day'].iloc[0]
    day_data = df[df['Day'] == example_day]

# 1. Time Series Plot: Call Volume with Outage and Post-Outage Window
plt.figure(figsize=(10, 6))
plt.plot(day_data['Hour'], day_data['Call Volume'], marker='o', label='Call Volume')
if day_data['Outage_Flag'].any():
    outage_hour = day_data[day_data['Outage_Flag']]['Hour'].min()
    plt.axvline(x=outage_hour, color='red', linestyle='--', label='Outage Start')
    # Shade post-outage window
    plt.fill_between(day_data['Hour'],
                     day_data['Call Volume'].min(),
                     day_data['Call Volume'].max(),
                     where=((day_data['Hour'] > outage_hour) & (day_data['Hour'] <= outage_hour + post_outage_hours)),
                     color='gray', alpha=0.3, label='Post-Outage Window')
plt.xlabel('Hour')
plt.ylabel('Call Volume')
plt.title(f'Call Volume on {example_day.date()} (Outage Analysis)')
plt.legend()
plt.show()

# 2. Bar Plot: Missed Calls Backlog Percentage in Post-Outage Window
post_outage_data = day_data[day_data['Post_Outage']]
plt.figure(figsize=(8, 5))
plt.bar(post_outage_data['Hour'], post_outage_data['Missed_Calls_Backlog_%'])
plt.xlabel('Hour')
plt.ylabel('Missed Calls Backlog (%)')
plt.title(f'Missed Calls Backlog (%) in Post-Outage (Day: {example_day.date()})')
plt.show()

# 3. Bar Plot: Answer Rate Drop Percentage in Post-Outage Window
plt.figure(figsize=(8, 5))
plt.bar(post_outage_data['Hour'], post_outage_data['Answer_Rate_Drop_%'])
plt.xlabel('Hour')
plt.ylabel('Answer Rate Drop (%)')
plt.title(f'Answer Rate Drop in Post-Outage (Day: {example_day.date()})')
plt.show()

# 4. Bar Plot: Increase in Calls per Agent Percentage in Post-Outage Window
plt.figure(figsize=(8, 5))
plt.bar(post_outage_data['Hour'], post_outage_data['Calls_per_Agent_Increase_%'])
plt.xlabel('Hour')
plt.ylabel('Calls per Agent Increase (%)')
plt.title(f'Calls per Agent Increase in Post-Outage (Day: {example_day.date()})')
plt.show()

# 5. Comparative Time Series: Average Call Volume on Outage vs. Non-Outage Days
avg_outage = df[df['Outage_Flag']].groupby('Hour')['Call Volume'].mean().reset_index()
avg_non_outage = df[~df['Outage_Flag']].groupby('Hour')['Call Volume'].mean().reset_index()

plt.figure(figsize=(10, 6))
plt.plot(avg_outage['Hour'], avg_outage['Call Volume'], marker='o', label='Outage Days')
plt.plot(avg_non_outage['Hour'], avg_non_outage['Call Volume'], marker='x', label='Non-Outage Days')
plt.xlabel('Hour')
plt.ylabel('Average Call Volume')
plt.title('Comparison of Average Call Volume: Outage vs Non-Outage Days')
plt.legend()
plt.show()

# -------------------------------
# Step 6: Statistical Significance Testing
# -------------------------------

# For each metric, compare post-outage vs. baseline (from non-outage days) using t-tests.
post_hours = df.loc[df['Post_Outage'], 'Hour'].unique()

def run_ttest(metric, label):
    post_metric = df[(df['Post_Outage']) & (df['Hour'].isin(post_hours))][metric]
    baseline_metric = df[(~df['Outage_Flag']) & (df['Hour'].isin(post_hours))][metric]
    t_stat, p_val = ttest_ind(post_metric, baseline_metric, nan_policy='omit')
    print(f"\nT-test for {label}:")
    print("  T-statistic:", t_stat)
    print("  P-value:", p_val)
    if p_val < 0.05:
        print("  => Statistically significant difference.")
    else:
        print("  => No statistically significant difference.")
        
# Run t-tests for key metrics
run_ttest('Missed calls', 'Missed Calls (absolute)')
run_ttest('Call Volume', 'Call Volume')
run_ttest('Answer Rate', 'Answer Rate')
run_ttest('Calls per agent', 'Calls per Agent')

# -------------------------------
# Step 7: OLS Regression Analysis
# -------------------------------

# Create an indicator variable for rows in the post-outage window
df['Is_Post_Outage'] = df['Post_Outage'].astype(int)

# Example OLS model: How does being in the post-outage period affect Answer Rate (controlling for Hour)
model_formula = 'Q("Answer Rate") ~ Is_Post_Outage + Hour'
ols_model = smf.ols(formula=model_formula, data=df).fit()
print("\nOLS Regression Results for Answer Rate:")
print(ols_model.summary())

# You can run similar OLS regressions for other metrics (e.g., 'Missed calls', 'Calls per agent') as needed.
